// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class Packet;
class local_confirm;
class secure_request;
class secure_reply;
class xnaddr_request;
class xnaddr_reply;

enum Packet_Type {
  Packet_Type_local_request = 1,
  Packet_Type_local_confirm = 2,
  Packet_Type_secure_request = 3,
  Packet_Type_secure_reply = 4,
  Packet_Type_xnaddr_request = 5,
  Packet_Type_xnaddr_reply = 6
};
bool Packet_Type_IsValid(int value);
const Packet_Type Packet_Type_Type_MIN = Packet_Type_local_request;
const Packet_Type Packet_Type_Type_MAX = Packet_Type_xnaddr_reply;
const int Packet_Type_Type_ARRAYSIZE = Packet_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor();
inline const ::std::string& Packet_Type_Name(Packet_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Packet_Type_descriptor(), value);
}
inline bool Packet_Type_Parse(
    const ::std::string& name, Packet_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Packet_Type>(
    Packet_Type_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Packet_Type Type;
  static const Type local_request = Packet_Type_local_request;
  static const Type local_confirm = Packet_Type_local_confirm;
  static const Type secure_request = Packet_Type_secure_request;
  static const Type secure_reply = Packet_Type_secure_reply;
  static const Type xnaddr_request = Packet_Type_xnaddr_request;
  static const Type xnaddr_reply = Packet_Type_xnaddr_reply;
  static inline bool Type_IsValid(int value) {
    return Packet_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Packet_Type_Type_MIN;
  static const Type Type_MAX =
    Packet_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Packet_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Packet_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Packet_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Packet_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Packet.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Packet_Type type() const;
  inline void set_type(::Packet_Type value);

  // optional .local_confirm lconfirm = 2;
  inline bool has_lconfirm() const;
  inline void clear_lconfirm();
  static const int kLconfirmFieldNumber = 2;
  inline const ::local_confirm& lconfirm() const;
  inline ::local_confirm* mutable_lconfirm();
  inline ::local_confirm* release_lconfirm();
  inline void set_allocated_lconfirm(::local_confirm* lconfirm);

  // optional .secure_request srequest = 3;
  inline bool has_srequest() const;
  inline void clear_srequest();
  static const int kSrequestFieldNumber = 3;
  inline const ::secure_request& srequest() const;
  inline ::secure_request* mutable_srequest();
  inline ::secure_request* release_srequest();
  inline void set_allocated_srequest(::secure_request* srequest);

  // optional .secure_reply sreply = 4;
  inline bool has_sreply() const;
  inline void clear_sreply();
  static const int kSreplyFieldNumber = 4;
  inline const ::secure_reply& sreply() const;
  inline ::secure_reply* mutable_sreply();
  inline ::secure_reply* release_sreply();
  inline void set_allocated_sreply(::secure_reply* sreply);

  // optional .xnaddr_request xrequest = 5;
  inline bool has_xrequest() const;
  inline void clear_xrequest();
  static const int kXrequestFieldNumber = 5;
  inline const ::xnaddr_request& xrequest() const;
  inline ::xnaddr_request* mutable_xrequest();
  inline ::xnaddr_request* release_xrequest();
  inline void set_allocated_xrequest(::xnaddr_request* xrequest);

  // optional .xnaddr_reply xreply = 6;
  inline bool has_xreply() const;
  inline void clear_xreply();
  static const int kXreplyFieldNumber = 6;
  inline const ::xnaddr_reply& xreply() const;
  inline ::xnaddr_reply* mutable_xreply();
  inline ::xnaddr_reply* release_xreply();
  inline void set_allocated_xreply(::xnaddr_reply* xreply);

  // @@protoc_insertion_point(class_scope:Packet)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lconfirm();
  inline void clear_has_lconfirm();
  inline void set_has_srequest();
  inline void clear_has_srequest();
  inline void set_has_sreply();
  inline void clear_has_sreply();
  inline void set_has_xrequest();
  inline void clear_has_xrequest();
  inline void set_has_xreply();
  inline void clear_has_xreply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::local_confirm* lconfirm_;
  ::secure_request* srequest_;
  ::secure_reply* sreply_;
  ::xnaddr_request* xrequest_;
  ::xnaddr_reply* xreply_;
  int type_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// -------------------------------------------------------------------

class local_confirm : public ::google::protobuf::Message {
 public:
  local_confirm();
  virtual ~local_confirm();

  local_confirm(const local_confirm& from);

  inline local_confirm& operator=(const local_confirm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const local_confirm& default_instance();

  void Swap(local_confirm* other);

  // implements Message ----------------------------------------------

  local_confirm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const local_confirm& from);
  void MergeFrom(const local_confirm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 secure_addr = 1;
  inline bool has_secure_addr() const;
  inline void clear_secure_addr();
  static const int kSecureAddrFieldNumber = 1;
  inline ::google::protobuf::uint32 secure_addr() const;
  inline void set_secure_addr(::google::protobuf::uint32 value);

  // required uint32 xnaddr = 2;
  inline bool has_xnaddr() const;
  inline void clear_xnaddr();
  static const int kXnaddrFieldNumber = 2;
  inline ::google::protobuf::uint32 xnaddr() const;
  inline void set_xnaddr(::google::protobuf::uint32 value);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required bytes abEnet = 4;
  inline bool has_abenet() const;
  inline void clear_abenet();
  static const int kAbEnetFieldNumber = 4;
  inline const ::std::string& abenet() const;
  inline void set_abenet(const ::std::string& value);
  inline void set_abenet(const char* value);
  inline void set_abenet(const void* value, size_t size);
  inline ::std::string* mutable_abenet();
  inline ::std::string* release_abenet();
  inline void set_allocated_abenet(::std::string* abenet);

  // required bytes abOnline = 5;
  inline bool has_abonline() const;
  inline void clear_abonline();
  static const int kAbOnlineFieldNumber = 5;
  inline const ::std::string& abonline() const;
  inline void set_abonline(const ::std::string& value);
  inline void set_abonline(const char* value);
  inline void set_abonline(const void* value, size_t size);
  inline ::std::string* mutable_abonline();
  inline ::std::string* release_abonline();
  inline void set_allocated_abonline(::std::string* abonline);

  // @@protoc_insertion_point(class_scope:local_confirm)
 private:
  inline void set_has_secure_addr();
  inline void clear_has_secure_addr();
  inline void set_has_xnaddr();
  inline void clear_has_xnaddr();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_abenet();
  inline void clear_has_abenet();
  inline void set_has_abonline();
  inline void clear_has_abonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 secure_addr_;
  ::google::protobuf::uint32 xnaddr_;
  ::std::string* abenet_;
  ::std::string* abonline_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static local_confirm* default_instance_;
};
// -------------------------------------------------------------------

class secure_request : public ::google::protobuf::Message {
 public:
  secure_request();
  virtual ~secure_request();

  secure_request(const secure_request& from);

  inline secure_request& operator=(const secure_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const secure_request& default_instance();

  void Swap(secure_request* other);

  // implements Message ----------------------------------------------

  secure_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const secure_request& from);
  void MergeFrom(const secure_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes abEnet = 1;
  inline bool has_abenet() const;
  inline void clear_abenet();
  static const int kAbEnetFieldNumber = 1;
  inline const ::std::string& abenet() const;
  inline void set_abenet(const ::std::string& value);
  inline void set_abenet(const char* value);
  inline void set_abenet(const void* value, size_t size);
  inline ::std::string* mutable_abenet();
  inline ::std::string* release_abenet();
  inline void set_allocated_abenet(::std::string* abenet);

  // @@protoc_insertion_point(class_scope:secure_request)
 private:
  inline void set_has_abenet();
  inline void clear_has_abenet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* abenet_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static secure_request* default_instance_;
};
// -------------------------------------------------------------------

class secure_reply : public ::google::protobuf::Message {
 public:
  secure_reply();
  virtual ~secure_reply();

  secure_reply(const secure_reply& from);

  inline secure_reply& operator=(const secure_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const secure_reply& default_instance();

  void Swap(secure_reply* other);

  // implements Message ----------------------------------------------

  secure_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const secure_reply& from);
  void MergeFrom(const secure_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 secure = 1;
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 1;
  inline ::google::protobuf::uint32 secure() const;
  inline void set_secure(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:secure_reply)
 private:
  inline void set_has_secure();
  inline void clear_has_secure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 secure_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static secure_reply* default_instance_;
};
// -------------------------------------------------------------------

class xnaddr_request : public ::google::protobuf::Message {
 public:
  xnaddr_request();
  virtual ~xnaddr_request();

  xnaddr_request(const xnaddr_request& from);

  inline xnaddr_request& operator=(const xnaddr_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const xnaddr_request& default_instance();

  void Swap(xnaddr_request* other);

  // implements Message ----------------------------------------------

  xnaddr_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const xnaddr_request& from);
  void MergeFrom(const xnaddr_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 secure = 1;
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 1;
  inline ::google::protobuf::uint32 secure() const;
  inline void set_secure(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xnaddr_request)
 private:
  inline void set_has_secure();
  inline void clear_has_secure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 secure_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static xnaddr_request* default_instance_;
};
// -------------------------------------------------------------------

class xnaddr_reply : public ::google::protobuf::Message {
 public:
  xnaddr_reply();
  virtual ~xnaddr_reply();

  xnaddr_reply(const xnaddr_reply& from);

  inline xnaddr_reply& operator=(const xnaddr_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const xnaddr_reply& default_instance();

  void Swap(xnaddr_reply* other);

  // implements Message ----------------------------------------------

  xnaddr_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const xnaddr_reply& from);
  void MergeFrom(const xnaddr_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 xnaddr = 1;
  inline bool has_xnaddr() const;
  inline void clear_xnaddr();
  static const int kXnaddrFieldNumber = 1;
  inline ::google::protobuf::uint32 xnaddr() const;
  inline void set_xnaddr(::google::protobuf::uint32 value);

  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required bytes abEnet = 3;
  inline bool has_abenet() const;
  inline void clear_abenet();
  static const int kAbEnetFieldNumber = 3;
  inline const ::std::string& abenet() const;
  inline void set_abenet(const ::std::string& value);
  inline void set_abenet(const char* value);
  inline void set_abenet(const void* value, size_t size);
  inline ::std::string* mutable_abenet();
  inline ::std::string* release_abenet();
  inline void set_allocated_abenet(::std::string* abenet);

  // required bytes abOnline = 4;
  inline bool has_abonline() const;
  inline void clear_abonline();
  static const int kAbOnlineFieldNumber = 4;
  inline const ::std::string& abonline() const;
  inline void set_abonline(const ::std::string& value);
  inline void set_abonline(const char* value);
  inline void set_abonline(const void* value, size_t size);
  inline ::std::string* mutable_abonline();
  inline ::std::string* release_abonline();
  inline void set_allocated_abonline(::std::string* abonline);

  // @@protoc_insertion_point(class_scope:xnaddr_reply)
 private:
  inline void set_has_xnaddr();
  inline void clear_has_xnaddr();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_abenet();
  inline void clear_has_abenet();
  inline void set_has_abonline();
  inline void clear_has_abonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 xnaddr_;
  ::google::protobuf::uint32 port_;
  ::std::string* abenet_;
  ::std::string* abonline_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static xnaddr_reply* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet

// required .Packet.Type type = 1;
inline bool Packet::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Packet_Type Packet::type() const {
  // @@protoc_insertion_point(field_get:Packet.type)
  return static_cast< ::Packet_Type >(type_);
}
inline void Packet::set_type(::Packet_Type value) {
  assert(::Packet_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Packet.type)
}

// optional .local_confirm lconfirm = 2;
inline bool Packet::has_lconfirm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_lconfirm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_lconfirm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_lconfirm() {
  if (lconfirm_ != NULL) lconfirm_->::local_confirm::Clear();
  clear_has_lconfirm();
}
inline const ::local_confirm& Packet::lconfirm() const {
  // @@protoc_insertion_point(field_get:Packet.lconfirm)
  return lconfirm_ != NULL ? *lconfirm_ : *default_instance_->lconfirm_;
}
inline ::local_confirm* Packet::mutable_lconfirm() {
  set_has_lconfirm();
  if (lconfirm_ == NULL) lconfirm_ = new ::local_confirm;
  // @@protoc_insertion_point(field_mutable:Packet.lconfirm)
  return lconfirm_;
}
inline ::local_confirm* Packet::release_lconfirm() {
  clear_has_lconfirm();
  ::local_confirm* temp = lconfirm_;
  lconfirm_ = NULL;
  return temp;
}
inline void Packet::set_allocated_lconfirm(::local_confirm* lconfirm) {
  delete lconfirm_;
  lconfirm_ = lconfirm;
  if (lconfirm) {
    set_has_lconfirm();
  } else {
    clear_has_lconfirm();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.lconfirm)
}

// optional .secure_request srequest = 3;
inline bool Packet::has_srequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_srequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_srequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_srequest() {
  if (srequest_ != NULL) srequest_->::secure_request::Clear();
  clear_has_srequest();
}
inline const ::secure_request& Packet::srequest() const {
  // @@protoc_insertion_point(field_get:Packet.srequest)
  return srequest_ != NULL ? *srequest_ : *default_instance_->srequest_;
}
inline ::secure_request* Packet::mutable_srequest() {
  set_has_srequest();
  if (srequest_ == NULL) srequest_ = new ::secure_request;
  // @@protoc_insertion_point(field_mutable:Packet.srequest)
  return srequest_;
}
inline ::secure_request* Packet::release_srequest() {
  clear_has_srequest();
  ::secure_request* temp = srequest_;
  srequest_ = NULL;
  return temp;
}
inline void Packet::set_allocated_srequest(::secure_request* srequest) {
  delete srequest_;
  srequest_ = srequest;
  if (srequest) {
    set_has_srequest();
  } else {
    clear_has_srequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.srequest)
}

// optional .secure_reply sreply = 4;
inline bool Packet::has_sreply() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_sreply() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_sreply() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_sreply() {
  if (sreply_ != NULL) sreply_->::secure_reply::Clear();
  clear_has_sreply();
}
inline const ::secure_reply& Packet::sreply() const {
  // @@protoc_insertion_point(field_get:Packet.sreply)
  return sreply_ != NULL ? *sreply_ : *default_instance_->sreply_;
}
inline ::secure_reply* Packet::mutable_sreply() {
  set_has_sreply();
  if (sreply_ == NULL) sreply_ = new ::secure_reply;
  // @@protoc_insertion_point(field_mutable:Packet.sreply)
  return sreply_;
}
inline ::secure_reply* Packet::release_sreply() {
  clear_has_sreply();
  ::secure_reply* temp = sreply_;
  sreply_ = NULL;
  return temp;
}
inline void Packet::set_allocated_sreply(::secure_reply* sreply) {
  delete sreply_;
  sreply_ = sreply;
  if (sreply) {
    set_has_sreply();
  } else {
    clear_has_sreply();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.sreply)
}

// optional .xnaddr_request xrequest = 5;
inline bool Packet::has_xrequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet::set_has_xrequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet::clear_has_xrequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet::clear_xrequest() {
  if (xrequest_ != NULL) xrequest_->::xnaddr_request::Clear();
  clear_has_xrequest();
}
inline const ::xnaddr_request& Packet::xrequest() const {
  // @@protoc_insertion_point(field_get:Packet.xrequest)
  return xrequest_ != NULL ? *xrequest_ : *default_instance_->xrequest_;
}
inline ::xnaddr_request* Packet::mutable_xrequest() {
  set_has_xrequest();
  if (xrequest_ == NULL) xrequest_ = new ::xnaddr_request;
  // @@protoc_insertion_point(field_mutable:Packet.xrequest)
  return xrequest_;
}
inline ::xnaddr_request* Packet::release_xrequest() {
  clear_has_xrequest();
  ::xnaddr_request* temp = xrequest_;
  xrequest_ = NULL;
  return temp;
}
inline void Packet::set_allocated_xrequest(::xnaddr_request* xrequest) {
  delete xrequest_;
  xrequest_ = xrequest;
  if (xrequest) {
    set_has_xrequest();
  } else {
    clear_has_xrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.xrequest)
}

// optional .xnaddr_reply xreply = 6;
inline bool Packet::has_xreply() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Packet::set_has_xreply() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Packet::clear_has_xreply() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Packet::clear_xreply() {
  if (xreply_ != NULL) xreply_->::xnaddr_reply::Clear();
  clear_has_xreply();
}
inline const ::xnaddr_reply& Packet::xreply() const {
  // @@protoc_insertion_point(field_get:Packet.xreply)
  return xreply_ != NULL ? *xreply_ : *default_instance_->xreply_;
}
inline ::xnaddr_reply* Packet::mutable_xreply() {
  set_has_xreply();
  if (xreply_ == NULL) xreply_ = new ::xnaddr_reply;
  // @@protoc_insertion_point(field_mutable:Packet.xreply)
  return xreply_;
}
inline ::xnaddr_reply* Packet::release_xreply() {
  clear_has_xreply();
  ::xnaddr_reply* temp = xreply_;
  xreply_ = NULL;
  return temp;
}
inline void Packet::set_allocated_xreply(::xnaddr_reply* xreply) {
  delete xreply_;
  xreply_ = xreply;
  if (xreply) {
    set_has_xreply();
  } else {
    clear_has_xreply();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.xreply)
}

// -------------------------------------------------------------------

// local_confirm

// required uint32 secure_addr = 1;
inline bool local_confirm::has_secure_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void local_confirm::set_has_secure_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void local_confirm::clear_has_secure_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void local_confirm::clear_secure_addr() {
  secure_addr_ = 0u;
  clear_has_secure_addr();
}
inline ::google::protobuf::uint32 local_confirm::secure_addr() const {
  // @@protoc_insertion_point(field_get:local_confirm.secure_addr)
  return secure_addr_;
}
inline void local_confirm::set_secure_addr(::google::protobuf::uint32 value) {
  set_has_secure_addr();
  secure_addr_ = value;
  // @@protoc_insertion_point(field_set:local_confirm.secure_addr)
}

// required uint32 xnaddr = 2;
inline bool local_confirm::has_xnaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void local_confirm::set_has_xnaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void local_confirm::clear_has_xnaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void local_confirm::clear_xnaddr() {
  xnaddr_ = 0u;
  clear_has_xnaddr();
}
inline ::google::protobuf::uint32 local_confirm::xnaddr() const {
  // @@protoc_insertion_point(field_get:local_confirm.xnaddr)
  return xnaddr_;
}
inline void local_confirm::set_xnaddr(::google::protobuf::uint32 value) {
  set_has_xnaddr();
  xnaddr_ = value;
  // @@protoc_insertion_point(field_set:local_confirm.xnaddr)
}

// required int32 port = 3;
inline bool local_confirm::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void local_confirm::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void local_confirm::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void local_confirm::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 local_confirm::port() const {
  // @@protoc_insertion_point(field_get:local_confirm.port)
  return port_;
}
inline void local_confirm::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:local_confirm.port)
}

// required bytes abEnet = 4;
inline bool local_confirm::has_abenet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void local_confirm::set_has_abenet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void local_confirm::clear_has_abenet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void local_confirm::clear_abenet() {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_->clear();
  }
  clear_has_abenet();
}
inline const ::std::string& local_confirm::abenet() const {
  // @@protoc_insertion_point(field_get:local_confirm.abEnet)
  return *abenet_;
}
inline void local_confirm::set_abenet(const ::std::string& value) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(value);
  // @@protoc_insertion_point(field_set:local_confirm.abEnet)
}
inline void local_confirm::set_abenet(const char* value) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(value);
  // @@protoc_insertion_point(field_set_char:local_confirm.abEnet)
}
inline void local_confirm::set_abenet(const void* value, size_t size) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:local_confirm.abEnet)
}
inline ::std::string* local_confirm::mutable_abenet() {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:local_confirm.abEnet)
  return abenet_;
}
inline ::std::string* local_confirm::release_abenet() {
  clear_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abenet_;
    abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void local_confirm::set_allocated_abenet(::std::string* abenet) {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abenet_;
  }
  if (abenet) {
    set_has_abenet();
    abenet_ = abenet;
  } else {
    clear_has_abenet();
    abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:local_confirm.abEnet)
}

// required bytes abOnline = 5;
inline bool local_confirm::has_abonline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void local_confirm::set_has_abonline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void local_confirm::clear_has_abonline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void local_confirm::clear_abonline() {
  if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_->clear();
  }
  clear_has_abonline();
}
inline const ::std::string& local_confirm::abonline() const {
  // @@protoc_insertion_point(field_get:local_confirm.abOnline)
  return *abonline_;
}
inline void local_confirm::set_abonline(const ::std::string& value) {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  abonline_->assign(value);
  // @@protoc_insertion_point(field_set:local_confirm.abOnline)
}
inline void local_confirm::set_abonline(const char* value) {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  abonline_->assign(value);
  // @@protoc_insertion_point(field_set_char:local_confirm.abOnline)
}
inline void local_confirm::set_abonline(const void* value, size_t size) {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  abonline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:local_confirm.abOnline)
}
inline ::std::string* local_confirm::mutable_abonline() {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:local_confirm.abOnline)
  return abonline_;
}
inline ::std::string* local_confirm::release_abonline() {
  clear_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abonline_;
    abonline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void local_confirm::set_allocated_abonline(::std::string* abonline) {
  if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abonline_;
  }
  if (abonline) {
    set_has_abonline();
    abonline_ = abonline;
  } else {
    clear_has_abonline();
    abonline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:local_confirm.abOnline)
}

// -------------------------------------------------------------------

// secure_request

// required bytes abEnet = 1;
inline bool secure_request::has_abenet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void secure_request::set_has_abenet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void secure_request::clear_has_abenet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void secure_request::clear_abenet() {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_->clear();
  }
  clear_has_abenet();
}
inline const ::std::string& secure_request::abenet() const {
  // @@protoc_insertion_point(field_get:secure_request.abEnet)
  return *abenet_;
}
inline void secure_request::set_abenet(const ::std::string& value) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(value);
  // @@protoc_insertion_point(field_set:secure_request.abEnet)
}
inline void secure_request::set_abenet(const char* value) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(value);
  // @@protoc_insertion_point(field_set_char:secure_request.abEnet)
}
inline void secure_request::set_abenet(const void* value, size_t size) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:secure_request.abEnet)
}
inline ::std::string* secure_request::mutable_abenet() {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:secure_request.abEnet)
  return abenet_;
}
inline ::std::string* secure_request::release_abenet() {
  clear_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abenet_;
    abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void secure_request::set_allocated_abenet(::std::string* abenet) {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abenet_;
  }
  if (abenet) {
    set_has_abenet();
    abenet_ = abenet;
  } else {
    clear_has_abenet();
    abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:secure_request.abEnet)
}

// -------------------------------------------------------------------

// secure_reply

// required uint32 secure = 1;
inline bool secure_reply::has_secure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void secure_reply::set_has_secure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void secure_reply::clear_has_secure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void secure_reply::clear_secure() {
  secure_ = 0u;
  clear_has_secure();
}
inline ::google::protobuf::uint32 secure_reply::secure() const {
  // @@protoc_insertion_point(field_get:secure_reply.secure)
  return secure_;
}
inline void secure_reply::set_secure(::google::protobuf::uint32 value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:secure_reply.secure)
}

// -------------------------------------------------------------------

// xnaddr_request

// required uint32 secure = 1;
inline bool xnaddr_request::has_secure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void xnaddr_request::set_has_secure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void xnaddr_request::clear_has_secure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void xnaddr_request::clear_secure() {
  secure_ = 0u;
  clear_has_secure();
}
inline ::google::protobuf::uint32 xnaddr_request::secure() const {
  // @@protoc_insertion_point(field_get:xnaddr_request.secure)
  return secure_;
}
inline void xnaddr_request::set_secure(::google::protobuf::uint32 value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:xnaddr_request.secure)
}

// -------------------------------------------------------------------

// xnaddr_reply

// required uint32 xnaddr = 1;
inline bool xnaddr_reply::has_xnaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void xnaddr_reply::set_has_xnaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void xnaddr_reply::clear_has_xnaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void xnaddr_reply::clear_xnaddr() {
  xnaddr_ = 0u;
  clear_has_xnaddr();
}
inline ::google::protobuf::uint32 xnaddr_reply::xnaddr() const {
  // @@protoc_insertion_point(field_get:xnaddr_reply.xnaddr)
  return xnaddr_;
}
inline void xnaddr_reply::set_xnaddr(::google::protobuf::uint32 value) {
  set_has_xnaddr();
  xnaddr_ = value;
  // @@protoc_insertion_point(field_set:xnaddr_reply.xnaddr)
}

// required uint32 port = 2;
inline bool xnaddr_reply::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void xnaddr_reply::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void xnaddr_reply::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void xnaddr_reply::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 xnaddr_reply::port() const {
  // @@protoc_insertion_point(field_get:xnaddr_reply.port)
  return port_;
}
inline void xnaddr_reply::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:xnaddr_reply.port)
}

// required bytes abEnet = 3;
inline bool xnaddr_reply::has_abenet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void xnaddr_reply::set_has_abenet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void xnaddr_reply::clear_has_abenet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void xnaddr_reply::clear_abenet() {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_->clear();
  }
  clear_has_abenet();
}
inline const ::std::string& xnaddr_reply::abenet() const {
  // @@protoc_insertion_point(field_get:xnaddr_reply.abEnet)
  return *abenet_;
}
inline void xnaddr_reply::set_abenet(const ::std::string& value) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(value);
  // @@protoc_insertion_point(field_set:xnaddr_reply.abEnet)
}
inline void xnaddr_reply::set_abenet(const char* value) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(value);
  // @@protoc_insertion_point(field_set_char:xnaddr_reply.abEnet)
}
inline void xnaddr_reply::set_abenet(const void* value, size_t size) {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  abenet_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xnaddr_reply.abEnet)
}
inline ::std::string* xnaddr_reply::mutable_abenet() {
  set_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abenet_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:xnaddr_reply.abEnet)
  return abenet_;
}
inline ::std::string* xnaddr_reply::release_abenet() {
  clear_has_abenet();
  if (abenet_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abenet_;
    abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void xnaddr_reply::set_allocated_abenet(::std::string* abenet) {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abenet_;
  }
  if (abenet) {
    set_has_abenet();
    abenet_ = abenet;
  } else {
    clear_has_abenet();
    abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:xnaddr_reply.abEnet)
}

// required bytes abOnline = 4;
inline bool xnaddr_reply::has_abonline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void xnaddr_reply::set_has_abonline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void xnaddr_reply::clear_has_abonline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void xnaddr_reply::clear_abonline() {
  if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_->clear();
  }
  clear_has_abonline();
}
inline const ::std::string& xnaddr_reply::abonline() const {
  // @@protoc_insertion_point(field_get:xnaddr_reply.abOnline)
  return *abonline_;
}
inline void xnaddr_reply::set_abonline(const ::std::string& value) {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  abonline_->assign(value);
  // @@protoc_insertion_point(field_set:xnaddr_reply.abOnline)
}
inline void xnaddr_reply::set_abonline(const char* value) {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  abonline_->assign(value);
  // @@protoc_insertion_point(field_set_char:xnaddr_reply.abOnline)
}
inline void xnaddr_reply::set_abonline(const void* value, size_t size) {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  abonline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xnaddr_reply.abOnline)
}
inline ::std::string* xnaddr_reply::mutable_abonline() {
  set_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abonline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:xnaddr_reply.abOnline)
  return abonline_;
}
inline ::std::string* xnaddr_reply::release_abonline() {
  clear_has_abonline();
  if (abonline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abonline_;
    abonline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void xnaddr_reply::set_allocated_abonline(::std::string* abonline) {
  if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abonline_;
  }
  if (abonline) {
    set_has_abonline();
    abonline_ = abonline;
  } else {
    clear_has_abonline();
    abonline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:xnaddr_reply.abOnline)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Packet_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet_Type>() {
  return ::Packet_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
