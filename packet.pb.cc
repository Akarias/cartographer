// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* local_confirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  local_confirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* secure_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  secure_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* secure_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  secure_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* xnaddr_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xnaddr_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* xnaddr_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xnaddr_reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, lconfirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, srequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, sreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, xrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, xreply_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  Packet_Type_descriptor_ = Packet_descriptor_->enum_type(0);
  local_confirm_descriptor_ = file->message_type(1);
  static const int local_confirm_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, secure_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, xnaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, abenet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, abonline_),
  };
  local_confirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      local_confirm_descriptor_,
      local_confirm::default_instance_,
      local_confirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(local_confirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(local_confirm));
  secure_request_descriptor_ = file->message_type(2);
  static const int secure_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secure_request, xnaddr_),
  };
  secure_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      secure_request_descriptor_,
      secure_request::default_instance_,
      secure_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secure_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secure_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(secure_request));
  secure_reply_descriptor_ = file->message_type(3);
  static const int secure_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secure_reply, secure_),
  };
  secure_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      secure_reply_descriptor_,
      secure_reply::default_instance_,
      secure_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secure_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(secure_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(secure_reply));
  xnaddr_request_descriptor_ = file->message_type(4);
  static const int xnaddr_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_request, secure_),
  };
  xnaddr_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xnaddr_request_descriptor_,
      xnaddr_request::default_instance_,
      xnaddr_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xnaddr_request));
  xnaddr_reply_descriptor_ = file->message_type(5);
  static const int xnaddr_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_reply, xnaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_reply, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_reply, abenet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_reply, abonline_),
  };
  xnaddr_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xnaddr_reply_descriptor_,
      xnaddr_reply::default_instance_,
      xnaddr_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xnaddr_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xnaddr_reply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    local_confirm_descriptor_, &local_confirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    secure_request_descriptor_, &secure_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    secure_reply_descriptor_, &secure_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xnaddr_request_descriptor_, &xnaddr_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xnaddr_reply_descriptor_, &xnaddr_reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete local_confirm::default_instance_;
  delete local_confirm_reflection_;
  delete secure_request::default_instance_;
  delete secure_request_reflection_;
  delete secure_reply::default_instance_;
  delete secure_reply_reflection_;
  delete xnaddr_request::default_instance_;
  delete xnaddr_request_reflection_;
  delete xnaddr_reply::default_instance_;
  delete xnaddr_reply_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\"\304\002\n\006Packet\022\032\n\004type\030\001 \002(\0162"
    "\014.Packet.Type\022 \n\010lconfirm\030\002 \001(\0132\016.local_"
    "confirm\022!\n\010srequest\030\003 \001(\0132\017.secure_reque"
    "st\022\035\n\006sreply\030\004 \001(\0132\r.secure_reply\022!\n\010xre"
    "quest\030\005 \001(\0132\017.xnaddr_request\022\035\n\006xreply\030\006"
    " \001(\0132\r.xnaddr_reply\"x\n\004Type\022\021\n\rlocal_req"
    "uest\020\001\022\021\n\rlocal_confirm\020\002\022\022\n\016secure_requ"
    "est\020\003\022\020\n\014secure_reply\020\004\022\022\n\016xnaddr_reques"
    "t\020\005\022\020\n\014xnaddr_reply\020\006\"d\n\rlocal_confirm\022\023"
    "\n\013secure_addr\030\001 \002(\r\022\016\n\006xnaddr\030\002 \002(\r\022\014\n\004p"
    "ort\030\003 \002(\005\022\016\n\006abEnet\030\004 \002(\014\022\020\n\010abOnline\030\005 "
    "\002(\014\" \n\016secure_request\022\016\n\006xnaddr\030\001 \002(\r\"\036\n"
    "\014secure_reply\022\016\n\006secure\030\001 \002(\r\" \n\016xnaddr_"
    "request\022\016\n\006secure\030\001 \002(\r\"N\n\014xnaddr_reply\022"
    "\016\n\006xnaddr\030\001 \002(\r\022\014\n\004port\030\002 \002(\r\022\016\n\006abEnet\030"
    "\003 \002(\014\022\020\n\010abOnline\030\004 \002(\014", 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  local_confirm::default_instance_ = new local_confirm();
  secure_request::default_instance_ = new secure_request();
  secure_reply::default_instance_ = new secure_reply();
  xnaddr_request::default_instance_ = new xnaddr_request();
  xnaddr_reply::default_instance_ = new xnaddr_reply();
  Packet::default_instance_->InitAsDefaultInstance();
  local_confirm::default_instance_->InitAsDefaultInstance();
  secure_request::default_instance_->InitAsDefaultInstance();
  secure_reply::default_instance_->InitAsDefaultInstance();
  xnaddr_request::default_instance_->InitAsDefaultInstance();
  xnaddr_reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Type_descriptor_;
}
bool Packet_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Type Packet::local_request;
const Packet_Type Packet::local_confirm;
const Packet_Type Packet::secure_request;
const Packet_Type Packet::secure_reply;
const Packet_Type Packet::xnaddr_request;
const Packet_Type Packet::xnaddr_reply;
const Packet_Type Packet::Type_MIN;
const Packet_Type Packet::Type_MAX;
const int Packet::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet::kTypeFieldNumber;
const int Packet::kLconfirmFieldNumber;
const int Packet::kSrequestFieldNumber;
const int Packet::kSreplyFieldNumber;
const int Packet::kXrequestFieldNumber;
const int Packet::kXreplyFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet)
}

void Packet::InitAsDefaultInstance() {
  lconfirm_ = const_cast< ::local_confirm*>(&::local_confirm::default_instance());
  srequest_ = const_cast< ::secure_request*>(&::secure_request::default_instance());
  sreply_ = const_cast< ::secure_reply*>(&::secure_reply::default_instance());
  xrequest_ = const_cast< ::xnaddr_request*>(&::xnaddr_request::default_instance());
  xreply_ = const_cast< ::xnaddr_reply*>(&::xnaddr_reply::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  lconfirm_ = NULL;
  srequest_ = NULL;
  sreply_ = NULL;
  xrequest_ = NULL;
  xreply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete lconfirm_;
    delete srequest_;
    delete sreply_;
    delete xrequest_;
    delete xreply_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 1;
    if (has_lconfirm()) {
      if (lconfirm_ != NULL) lconfirm_->::local_confirm::Clear();
    }
    if (has_srequest()) {
      if (srequest_ != NULL) srequest_->::secure_request::Clear();
    }
    if (has_sreply()) {
      if (sreply_ != NULL) sreply_->::secure_reply::Clear();
    }
    if (has_xrequest()) {
      if (xrequest_ != NULL) xrequest_->::xnaddr_request::Clear();
    }
    if (has_xreply()) {
      if (xreply_ != NULL) xreply_->::xnaddr_reply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet_Type_IsValid(value)) {
            set_type(static_cast< ::Packet_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lconfirm;
        break;
      }

      // optional .local_confirm lconfirm = 2;
      case 2: {
        if (tag == 18) {
         parse_lconfirm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lconfirm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_srequest;
        break;
      }

      // optional .secure_request srequest = 3;
      case 3: {
        if (tag == 26) {
         parse_srequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sreply;
        break;
      }

      // optional .secure_reply sreply = 4;
      case 4: {
        if (tag == 34) {
         parse_sreply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sreply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_xrequest;
        break;
      }

      // optional .xnaddr_request xrequest = 5;
      case 5: {
        if (tag == 42) {
         parse_xrequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_xreply;
        break;
      }

      // optional .xnaddr_reply xreply = 6;
      case 6: {
        if (tag == 50) {
         parse_xreply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xreply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet)
  // required .Packet.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .local_confirm lconfirm = 2;
  if (has_lconfirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lconfirm(), output);
  }

  // optional .secure_request srequest = 3;
  if (has_srequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->srequest(), output);
  }

  // optional .secure_reply sreply = 4;
  if (has_sreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sreply(), output);
  }

  // optional .xnaddr_request xrequest = 5;
  if (has_xrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->xrequest(), output);
  }

  // optional .xnaddr_reply xreply = 6;
  if (has_xreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xreply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Packet)
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet)
  // required .Packet.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .local_confirm lconfirm = 2;
  if (has_lconfirm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lconfirm(), target);
  }

  // optional .secure_request srequest = 3;
  if (has_srequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->srequest(), target);
  }

  // optional .secure_reply sreply = 4;
  if (has_sreply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sreply(), target);
  }

  // optional .xnaddr_request xrequest = 5;
  if (has_xrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->xrequest(), target);
  }

  // optional .xnaddr_reply xreply = 6;
  if (has_xreply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->xreply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packet)
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .local_confirm lconfirm = 2;
    if (has_lconfirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lconfirm());
    }

    // optional .secure_request srequest = 3;
    if (has_srequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->srequest());
    }

    // optional .secure_reply sreply = 4;
    if (has_sreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sreply());
    }

    // optional .xnaddr_request xrequest = 5;
    if (has_xrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xrequest());
    }

    // optional .xnaddr_reply xreply = 6;
    if (has_xreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xreply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lconfirm()) {
      mutable_lconfirm()->::local_confirm::MergeFrom(from.lconfirm());
    }
    if (from.has_srequest()) {
      mutable_srequest()->::secure_request::MergeFrom(from.srequest());
    }
    if (from.has_sreply()) {
      mutable_sreply()->::secure_reply::MergeFrom(from.sreply());
    }
    if (from.has_xrequest()) {
      mutable_xrequest()->::xnaddr_request::MergeFrom(from.xrequest());
    }
    if (from.has_xreply()) {
      mutable_xreply()->::xnaddr_reply::MergeFrom(from.xreply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_lconfirm()) {
    if (!this->lconfirm().IsInitialized()) return false;
  }
  if (has_srequest()) {
    if (!this->srequest().IsInitialized()) return false;
  }
  if (has_sreply()) {
    if (!this->sreply().IsInitialized()) return false;
  }
  if (has_xrequest()) {
    if (!this->xrequest().IsInitialized()) return false;
  }
  if (has_xreply()) {
    if (!this->xreply().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lconfirm_, other->lconfirm_);
    std::swap(srequest_, other->srequest_);
    std::swap(sreply_, other->sreply_);
    std::swap(xrequest_, other->xrequest_);
    std::swap(xreply_, other->xreply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int local_confirm::kSecureAddrFieldNumber;
const int local_confirm::kXnaddrFieldNumber;
const int local_confirm::kPortFieldNumber;
const int local_confirm::kAbEnetFieldNumber;
const int local_confirm::kAbOnlineFieldNumber;
#endif  // !_MSC_VER

local_confirm::local_confirm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:local_confirm)
}

void local_confirm::InitAsDefaultInstance() {
}

local_confirm::local_confirm(const local_confirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:local_confirm)
}

void local_confirm::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  secure_addr_ = 0u;
  xnaddr_ = 0u;
  port_ = 0;
  abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abonline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

local_confirm::~local_confirm() {
  // @@protoc_insertion_point(destructor:local_confirm)
  SharedDtor();
}

void local_confirm::SharedDtor() {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abenet_;
  }
  if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abonline_;
  }
  if (this != default_instance_) {
  }
}

void local_confirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* local_confirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return local_confirm_descriptor_;
}

const local_confirm& local_confirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

local_confirm* local_confirm::default_instance_ = NULL;

local_confirm* local_confirm::New() const {
  return new local_confirm;
}

void local_confirm::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<local_confirm*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(secure_addr_, xnaddr_);
    port_ = 0;
    if (has_abenet()) {
      if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abenet_->clear();
      }
    }
    if (has_abonline()) {
      if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abonline_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool local_confirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:local_confirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secure_addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secure_addr_)));
          set_has_secure_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_xnaddr;
        break;
      }

      // required uint32 xnaddr = 2;
      case 2: {
        if (tag == 16) {
         parse_xnaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xnaddr_)));
          set_has_xnaddr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_abEnet;
        break;
      }

      // required bytes abEnet = 4;
      case 4: {
        if (tag == 34) {
         parse_abEnet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_abenet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_abOnline;
        break;
      }

      // required bytes abOnline = 5;
      case 5: {
        if (tag == 42) {
         parse_abOnline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_abonline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:local_confirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:local_confirm)
  return false;
#undef DO_
}

void local_confirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:local_confirm)
  // required uint32 secure_addr = 1;
  if (has_secure_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secure_addr(), output);
  }

  // required uint32 xnaddr = 2;
  if (has_xnaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xnaddr(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required bytes abEnet = 4;
  if (has_abenet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->abenet(), output);
  }

  // required bytes abOnline = 5;
  if (has_abonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->abonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:local_confirm)
}

::google::protobuf::uint8* local_confirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:local_confirm)
  // required uint32 secure_addr = 1;
  if (has_secure_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secure_addr(), target);
  }

  // required uint32 xnaddr = 2;
  if (has_xnaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xnaddr(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required bytes abEnet = 4;
  if (has_abenet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->abenet(), target);
  }

  // required bytes abOnline = 5;
  if (has_abonline()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->abonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:local_confirm)
  return target;
}

int local_confirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secure_addr = 1;
    if (has_secure_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secure_addr());
    }

    // required uint32 xnaddr = 2;
    if (has_xnaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xnaddr());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required bytes abEnet = 4;
    if (has_abenet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->abenet());
    }

    // required bytes abOnline = 5;
    if (has_abonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->abonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void local_confirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const local_confirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const local_confirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void local_confirm::MergeFrom(const local_confirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secure_addr()) {
      set_secure_addr(from.secure_addr());
    }
    if (from.has_xnaddr()) {
      set_xnaddr(from.xnaddr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_abenet()) {
      set_abenet(from.abenet());
    }
    if (from.has_abonline()) {
      set_abonline(from.abonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void local_confirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void local_confirm::CopyFrom(const local_confirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool local_confirm::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void local_confirm::Swap(local_confirm* other) {
  if (other != this) {
    std::swap(secure_addr_, other->secure_addr_);
    std::swap(xnaddr_, other->xnaddr_);
    std::swap(port_, other->port_);
    std::swap(abenet_, other->abenet_);
    std::swap(abonline_, other->abonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata local_confirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = local_confirm_descriptor_;
  metadata.reflection = local_confirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int secure_request::kXnaddrFieldNumber;
#endif  // !_MSC_VER

secure_request::secure_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:secure_request)
}

void secure_request::InitAsDefaultInstance() {
}

secure_request::secure_request(const secure_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:secure_request)
}

void secure_request::SharedCtor() {
  _cached_size_ = 0;
  xnaddr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

secure_request::~secure_request() {
  // @@protoc_insertion_point(destructor:secure_request)
  SharedDtor();
}

void secure_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void secure_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* secure_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return secure_request_descriptor_;
}

const secure_request& secure_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

secure_request* secure_request::default_instance_ = NULL;

secure_request* secure_request::New() const {
  return new secure_request;
}

void secure_request::Clear() {
  xnaddr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool secure_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:secure_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 xnaddr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xnaddr_)));
          set_has_xnaddr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:secure_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:secure_request)
  return false;
#undef DO_
}

void secure_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:secure_request)
  // required uint32 xnaddr = 1;
  if (has_xnaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xnaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:secure_request)
}

::google::protobuf::uint8* secure_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:secure_request)
  // required uint32 xnaddr = 1;
  if (has_xnaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xnaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secure_request)
  return target;
}

int secure_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 xnaddr = 1;
    if (has_xnaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xnaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void secure_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const secure_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const secure_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void secure_request::MergeFrom(const secure_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xnaddr()) {
      set_xnaddr(from.xnaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void secure_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secure_request::CopyFrom(const secure_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secure_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void secure_request::Swap(secure_request* other) {
  if (other != this) {
    std::swap(xnaddr_, other->xnaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata secure_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = secure_request_descriptor_;
  metadata.reflection = secure_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int secure_reply::kSecureFieldNumber;
#endif  // !_MSC_VER

secure_reply::secure_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:secure_reply)
}

void secure_reply::InitAsDefaultInstance() {
}

secure_reply::secure_reply(const secure_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:secure_reply)
}

void secure_reply::SharedCtor() {
  _cached_size_ = 0;
  secure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

secure_reply::~secure_reply() {
  // @@protoc_insertion_point(destructor:secure_reply)
  SharedDtor();
}

void secure_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void secure_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* secure_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return secure_reply_descriptor_;
}

const secure_reply& secure_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

secure_reply* secure_reply::default_instance_ = NULL;

secure_reply* secure_reply::New() const {
  return new secure_reply;
}

void secure_reply::Clear() {
  secure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool secure_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:secure_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secure = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:secure_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:secure_reply)
  return false;
#undef DO_
}

void secure_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:secure_reply)
  // required uint32 secure = 1;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:secure_reply)
}

::google::protobuf::uint8* secure_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:secure_reply)
  // required uint32 secure = 1;
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secure_reply)
  return target;
}

int secure_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secure = 1;
    if (has_secure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void secure_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const secure_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const secure_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void secure_reply::MergeFrom(const secure_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secure()) {
      set_secure(from.secure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void secure_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secure_reply::CopyFrom(const secure_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secure_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void secure_reply::Swap(secure_reply* other) {
  if (other != this) {
    std::swap(secure_, other->secure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata secure_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = secure_reply_descriptor_;
  metadata.reflection = secure_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xnaddr_request::kSecureFieldNumber;
#endif  // !_MSC_VER

xnaddr_request::xnaddr_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnaddr_request)
}

void xnaddr_request::InitAsDefaultInstance() {
}

xnaddr_request::xnaddr_request(const xnaddr_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xnaddr_request)
}

void xnaddr_request::SharedCtor() {
  _cached_size_ = 0;
  secure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xnaddr_request::~xnaddr_request() {
  // @@protoc_insertion_point(destructor:xnaddr_request)
  SharedDtor();
}

void xnaddr_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xnaddr_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xnaddr_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xnaddr_request_descriptor_;
}

const xnaddr_request& xnaddr_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

xnaddr_request* xnaddr_request::default_instance_ = NULL;

xnaddr_request* xnaddr_request::New() const {
  return new xnaddr_request;
}

void xnaddr_request::Clear() {
  secure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xnaddr_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnaddr_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secure = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnaddr_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnaddr_request)
  return false;
#undef DO_
}

void xnaddr_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnaddr_request)
  // required uint32 secure = 1;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xnaddr_request)
}

::google::protobuf::uint8* xnaddr_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xnaddr_request)
  // required uint32 secure = 1;
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xnaddr_request)
  return target;
}

int xnaddr_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secure = 1;
    if (has_secure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xnaddr_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xnaddr_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xnaddr_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xnaddr_request::MergeFrom(const xnaddr_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secure()) {
      set_secure(from.secure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xnaddr_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xnaddr_request::CopyFrom(const xnaddr_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xnaddr_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xnaddr_request::Swap(xnaddr_request* other) {
  if (other != this) {
    std::swap(secure_, other->secure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xnaddr_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xnaddr_request_descriptor_;
  metadata.reflection = xnaddr_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xnaddr_reply::kXnaddrFieldNumber;
const int xnaddr_reply::kPortFieldNumber;
const int xnaddr_reply::kAbEnetFieldNumber;
const int xnaddr_reply::kAbOnlineFieldNumber;
#endif  // !_MSC_VER

xnaddr_reply::xnaddr_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnaddr_reply)
}

void xnaddr_reply::InitAsDefaultInstance() {
}

xnaddr_reply::xnaddr_reply(const xnaddr_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xnaddr_reply)
}

void xnaddr_reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  xnaddr_ = 0u;
  port_ = 0u;
  abenet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abonline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xnaddr_reply::~xnaddr_reply() {
  // @@protoc_insertion_point(destructor:xnaddr_reply)
  SharedDtor();
}

void xnaddr_reply::SharedDtor() {
  if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abenet_;
  }
  if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abonline_;
  }
  if (this != default_instance_) {
  }
}

void xnaddr_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xnaddr_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xnaddr_reply_descriptor_;
}

const xnaddr_reply& xnaddr_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

xnaddr_reply* xnaddr_reply::default_instance_ = NULL;

xnaddr_reply* xnaddr_reply::New() const {
  return new xnaddr_reply;
}

void xnaddr_reply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<xnaddr_reply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(xnaddr_, port_);
    if (has_abenet()) {
      if (abenet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abenet_->clear();
      }
    }
    if (has_abonline()) {
      if (abonline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abonline_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xnaddr_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnaddr_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 xnaddr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xnaddr_)));
          set_has_xnaddr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abEnet;
        break;
      }

      // required bytes abEnet = 3;
      case 3: {
        if (tag == 26) {
         parse_abEnet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_abenet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_abOnline;
        break;
      }

      // required bytes abOnline = 4;
      case 4: {
        if (tag == 34) {
         parse_abOnline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_abonline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnaddr_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnaddr_reply)
  return false;
#undef DO_
}

void xnaddr_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnaddr_reply)
  // required uint32 xnaddr = 1;
  if (has_xnaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xnaddr(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required bytes abEnet = 3;
  if (has_abenet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->abenet(), output);
  }

  // required bytes abOnline = 4;
  if (has_abonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->abonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xnaddr_reply)
}

::google::protobuf::uint8* xnaddr_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xnaddr_reply)
  // required uint32 xnaddr = 1;
  if (has_xnaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xnaddr(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required bytes abEnet = 3;
  if (has_abenet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->abenet(), target);
  }

  // required bytes abOnline = 4;
  if (has_abonline()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->abonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xnaddr_reply)
  return target;
}

int xnaddr_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 xnaddr = 1;
    if (has_xnaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xnaddr());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required bytes abEnet = 3;
    if (has_abenet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->abenet());
    }

    // required bytes abOnline = 4;
    if (has_abonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->abonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xnaddr_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xnaddr_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xnaddr_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xnaddr_reply::MergeFrom(const xnaddr_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xnaddr()) {
      set_xnaddr(from.xnaddr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_abenet()) {
      set_abenet(from.abenet());
    }
    if (from.has_abonline()) {
      set_abonline(from.abonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xnaddr_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xnaddr_reply::CopyFrom(const xnaddr_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xnaddr_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void xnaddr_reply::Swap(xnaddr_reply* other) {
  if (other != this) {
    std::swap(xnaddr_, other->xnaddr_);
    std::swap(port_, other->port_);
    std::swap(abenet_, other->abenet_);
    std::swap(abonline_, other->abonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xnaddr_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xnaddr_reply_descriptor_;
  metadata.reflection = xnaddr_reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
